# -*- coding: utf-8 -*-
"""
Created on Tue Feb 13 11:37:22 2018

@author: Piers
"""

# -*- coding: utf-8 -*-
"""
Created on Thu Feb  8 13:31:23 2018

@author: Piers
"""
import math
import numpy as np
import matplotlib.pyplot as plt

#function = np.random.uniform(low=1.0, high=1.0, size=100)
#initialize an array of all zeros except "Infinity" (TO DO - COULD MAKE IT INFINITY?) at one point
sine = []
samp = np.linspace(0,4*3.1459,2000)
for i in range (0,2000):
    sine = np.append(sine, math.sin(samp[i])) 

#Show this "Delta function"
plt.plot(sine, '.')
plt.show()

#FT this "Delta function"
deltaFT = np.fft.rfft(sine) #TO DO - CHECK NORMALIZATION?? Works out upon IFT but worth knowing

"""
inv = np.fft.irfft(deltaFT)
plt.plot(inv, '.')
plt.show()
"""

#split this FT into real and imag parts
R = np.real(deltaFT)
I = np.imag(deltaFT)

#Get Amp and phase info from FT data
amp = []
phase = []
for i in range (0,len(deltaFT)):
    amp = np.append(amp, (R[i]**2 + I[i]**2)**(1/2))
    phase = np.append(phase, math.atan(I[i]/R[i]))
    
plt.plot(amp, 'x')
plt.plot(phase, '.')
plt.show()

#Now add some systematic phase offset to the data

newPhase = []
phaseMultiplier = 0 #CHANGE ME
for i in range (0,len(deltaFT)): #TO DO generalise this 50
    newPhase = np.append(newPhase, phase[i] + (math.pi)*(phaseMultiplier)) #Add pi/3 to all of em
    #recombine amplitude info and phase info then iFT - solve sim equ for phase and amp recomp
    #Real Part


#Recombine into real and imaginary parts
newR=[]
newI=[] 
newDeltaFT=[]

#SUPER IMPORTATNT NOTE - THIS WORKS NOW BECAUSE I DID SOMETHING STRANGE,
#THIS ALTERNATES THE SIGN OF THE RECONSTRUCTED PHASE AND AMPLITUDE TO PROPERLY
#RECONSTRUCT THE ORIGINAL FT DATA.
for j in range (0,len(phase)): #CURRENTLY WORKING ON - This reconstructs with wrong signs

    newR = np.append(newR, (amp[j]*math.cos(newPhase[j]))*np.sign(R[j]))
    newI = np.append(newI, amp[j]*math.sin(newPhase[j])*(-1)*np.sign(I[j]))
    """
    newR = np.append(newR, (amp[j]))
    newI = np.append(newI, amp[j]*newPhase[j])
        """
for k in range (0,len(phase)):
    newDeltaFT = np.append(newDeltaFT, complex(newR[k] , newI[k]))

#IFT the result and get "Delta function" back
inverse = np.fft.irfft(newDeltaFT)
plt.plot(inverse, '.')
plt.show()


#All this stuff can give you an actual delta function but it's not too happy with fft it
"""

import numpy as np
import matplotlib.pyplot as plt

#Import stuff used for delta function!
import sympy
from sympy import DiracDelta
from sympy.abc import x

# Test - does the integral act as expected?
print(sympy.integrate(DiracDelta(x), (x, 0, 5.0))) #(it sortof does...)

#FT The delta function
np.fft.fft(DiracDelta(x))

"""

