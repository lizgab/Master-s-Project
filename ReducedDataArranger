"""
This programme (should) takes the raw data, sorts it into baselines, averages for repeated data, 
It will then ... undo the mod 2pi, calculates an array where data needs predicting and prints to a file 
for use in a george library process
"""

import numpy as np
import cmath
import matplotlib.pyplot as plt

#function to read in data 
def readfile(filename):
    #open file
    filedata = open(filename, 'r')
    #create blank arrays 
    timestamp, antenna1, antenna2, vis, visuncert, num, flag, phs, phsErr = ([] for i in range(9))
    #while not at the end...
    while True:
        line = filedata.readline() #read the lines
        if not line: break #end infinite loop if no more lines
                                   
        items = line.split(',') #split the items in each line by ','

        #only take unflagged and scan number 2 (This is calib scan)
        if any("False" in x for x in items):
            timestamp.append(float(items[0]))
            antenna1.append(float(items[1]))
            antenna2.append(float(items[2]))
            vis.append(complex(items[3])) #vis is complex
            #visuncert.append(complex(items[4]+items[4]*j))
            num.append(float(items[5]))
            flag.append(str(items[6])) #flag is a string   

                  
    #turn into normal numpy arrays
    timestamp=np.array(timestamp)
    antenna1=np.array(antenna1)
    antenna2=np.array(antenna2)
    vis=np.array(vis)
   #visuncert=np.array(visuncert)
    num=np.array(num)
    
    #calculate phase and phsErr
    for i in range (0,len(vis)):
        phs.append(cmath.phase(vis[i])) #calculate phase
        #phsErr.append(cmath.phase(visuncert[i]))
    #turn from list in nnumpy array 
    phs=np.array(phs)
    #phsErr=np.array(phsErr)

    
    return timestamp, antenna1, antenna2, vis, visuncert, num, flag, phs, #phsErr

#********************************************************************************************
#Main
#Call function to read data
timestamp, antenna1, antenna2, vis, visuncert, num, flag, phs = readfile('A75_data.dat')

#Assign each baseline a unique number
baselines = ((antenna1 + antenna2)*(antenna1 + antenna2 +1))/2 + antenna2

#Prep arrays
timestampBaseline = []
phaseBaseline = []
phaseErrBaseline = []
numBaseline = []

#Loop over whole dataset looking for baseline[0] data and store it
for i in range (0,len(timestamp)):
  if (baselines[i] == baselines[0] and num[i] == 2): #TO DO - PUT THIS 2 AT THE TOP SOMEWHERE #if the baseline is the same as the first baseline and the scan is number two
      #populate arrays with baseline data
      timestampBaseline.append(timestamp[i])
      phaseBaseline.append(phs[i])  
      numBaseline.append(num[i])
      #phaseErrBaseline.append(v)

"""
#Won't filter out data to just the calibration data
#Loop over whole dataset looking for baseline[0] data and store it
for i in range (0,len(timestamp)):
  if (baselines[i] == baselines[0]): #if the baseline is the same as the first baseline
      #populate arrays with baseline data
      timestampBaseline.append(timestamp[i])
      phaseBaseline.append(phs[i])  
      numBaseline.append(num[i])
#Check what the column num does - colour datapoints depending on the value of num
"""

#plot, for first baseline, phase against time
plt.figure()
plt.scatter(timestampBaseline,phaseBaseline, c = numBaseline)
plt.show()

# Now average over repeated times...
# Averaging might have a problem if the two values are ~-pi and pi
#Identify values, location and occurences of each particular timestamp
times, indicies, inverse, occurences = np.unique(timestampBaseline, return_index=True , return_inverse=True, return_counts=True)

timeAv = []
phaseAv = []

#Loop over every unique time
for i in range(0,len(times)):
   temp = 0
    #If the time is NOT repeated just add the data to the end of the array
   """
    if occurences[i] == 1:
        #Append the value corresponding to the index
        timeAv.append(timestampBaseline[indicies[i]])
        phaseAv.append(phaseBaseline[indicies[i]])
   """
   #If the time is repeated, average over all corresponding values
   # if occurences[i] != 1:
   #Find where the inverse value is repeated and average over these elements of the array
   index = np.asarray(np.where(inverse == inverse[i])) #find values, convert to array
   #Loop from zero to the number of ocurences
   for j in range(0,len(index.T)):
       temp += phaseBaseline[index[0][j]]
   phaseAv.append(temp/len(index.T))#Phase should be averaged over

   
#Checko  
#1timesagain, indiciesagain, occurencesagain = np.unique(timeAv, return_index=True, return_counts=True)

plt.figure()
plt.scatter(times,phaseAv)
plt.show()
